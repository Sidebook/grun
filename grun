#!/usr/bin/env bash
ARGS="-Wall -std=c++14"
CXX="g++"
DEBUGGER="lldb"
USE_DEBUGGER=0

function usage () {
    echo 'usage: grun [-g] [-h] source input_text'
    echo 'Available options:'
    echo "    -g : start debugging on $DEBUGGER"
    echo '    -h : show this help'
}

function status_detail () {
    if [ $1 -le 128 ]; then
        echo "Non zero exit status: $1"
        return 0
    fi
    declare -a signals
    signals=(
        'HUP(1) - Hangup' \
        'INT(2) - Terminal interrupt' \
        'QUIT(3) - Terminal quit' \
        'ILL(4) - Illegal instruction' \
        'TRAP(5) - Trace trap' \
        'IOT(6) - IOT Trap' \
        'BUS(7) - BUS error' \
        'FPE(8) - Floating point exception' \
        'KILL(9) - Kill' \
        'USR1(10) - User defined signal 1' \
        'SEGV(11) - Segmentation fault' \
        'USR2(12) - User defined signal 2' \
        'PIPE(13) - Write on a pipe with no reader, Broken pipe' \
        'ALRM(14) - Alarm clock' \
        'TERM(15) - Termination' \
        'STKFLT(16) - Stack fault' \
        'CHLD(17) - Child process has stopped or exited, changed' \
        'CONTv(18) - Continue executing, if stopped' \
        'STOP(19) - Stop executing' \
        'TSTP(20) - Terminal stop signal' \
        'TTIN(21) - Background process trying to read, from TTY' \
        'TTOU(22) - Background process trying to write, to TTY' \
        'URG(23) - Urgent condition on socket' \
        'XCPU(24) - CPU limit exceeded' \
        'XFSZ(25) - File size limit exceeded' \
        'VTALRM(26) - Virtual alarm clock' \
        'PROF(27) - Profiling alarm clock' \
        'WINCH(28) - Window size change' \
        'IO(29) - I/O now possible' \
        'PWR(30) - Power failure restart' \
    )
    echo ${signals[$(($1 - 128 - 1))]}
}

function grunecho () {
    echo -e "\033[90;1m(grun) $1\033[0m"
}

SOURCE_FILE=''
INPUT_FILE=''

for OPT in "$@"
do
    case $OPT in
        '-g' )
            USE_DEBUGGER=1
            ulimit -c unlimited
            ARGS="$ARGS -g3"
            ;;
        '-h' )
            usage
            exit 0
            ;;
        * )
            if [ -z "$SOURCE_FILE" ]; then
                SOURCE_FILE=$1
            elif [ -z "$INPUT_FILE" ]; then
                INPUT_FILE=$1
            else
                echo "Unknown argument: $1" 1>&2
                usage
                exit 1
            fi
    esac
    shift
done

COMPILE="$CXX $ARGS $SOURCE_FILE"
grunecho "$COMPILE"
eval $COMPILE
code=$?
if [ $code != 0 ]; then
    grunecho "\033[91;1mbuild failed:\033[0m $(status_detail $code)"
else
    RUN="./a.out"
    if [ $USE_DEBUGGER == 1 ]; then
        RUN="$DEBUGGER $RUN"
        echo $INPUT_FILE
        if [ -n "$INPUT_FILE" ]; then
            RUN="(echo -e \"settings set target.input-path $INPUT_FILE \\\nprocess launch\" && cat) | $RUN"
        fi
    else
        if [ -n "$INPUT_FILE" ]; then
            RUN="$RUN < $INPUT_FILE"
        fi
    fi
    grunecho "$RUN"
    eval $RUN
    code=$?
    if [ $code != 0 ]; then
        grunecho "\033[91;1mexecution failed:\033[0m $(status_detail $code)"
    fi
fi
